name: CI/CD
on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      pg:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: webnovel_test
          POSTGRES_USER: webnovel_test
        ports:
          - "5432:5432"
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U webnovel_test; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Build test image
        run: docker build --target test -t webnovel-test .

      - name: Run tests in container
        run: |
          docker run --rm \
          --network host \
          webnovel-test


  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to docker hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build production image and push to docker hub
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          target: production
          cache-from: type=registry,ref=${{ vars.DOCKERHUB_USERNAME }}/webnovel:buildcache
          cache-to: type=registry,ref=${{ vars.DOCKERHUB_USERNAME }}/webnovel:buildcache,mode=max
          tags: |
            ${{ vars.DOCKERHUB_USERNAME }}/webnovel:latest
            ${{ vars.DOCKERHUB_USERNAME }}/webnovel:${{ github.sha }}

      - name: Deploy on Render
        run: |
          echo "Attempt to deploy..."
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.DEPLOYHOOK_RENDER }})

          if [ $response -eq 200 ] || [ $response -eq 201 ]; then
            echo "Deploy triggered triggered successfully: $response"
          else
            echo "Deploy failed with status: $response"
            exit 1
          fi